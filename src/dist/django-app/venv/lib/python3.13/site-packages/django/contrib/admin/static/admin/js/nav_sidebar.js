'use strict';

function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
{
  var initSidebarQuickFilter = function initSidebarQuickFilter() {
    var options = [];
    var navSidebar = document.getElementById('nav-sidebar');
    if (!navSidebar) {
      return;
    }
    navSidebar.querySelectorAll('th[scope=row] a').forEach(function (container) {
      options.push({
        title: container.innerHTML,
        node: container
      });
    });
    function checkValue(event) {
      var filterValue = event.target.value;
      if (filterValue) {
        filterValue = filterValue.toLowerCase();
      }
      if (event.key === 'Escape') {
        filterValue = '';
        event.target.value = ''; // clear input
      }
      var matches = false;
      var _iterator = _createForOfIteratorHelper(options),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var o = _step.value;
          var displayValue = '';
          if (filterValue) {
            if (o.title.toLowerCase().indexOf(filterValue) === -1) {
              displayValue = 'none';
            } else {
              matches = true;
            }
          }
          // show/hide parent <TR>
          o.node.parentNode.parentNode.style.display = displayValue;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (!filterValue || matches) {
        event.target.classList.remove('no-results');
      } else {
        event.target.classList.add('no-results');
      }
      sessionStorage.setItem('django.admin.navSidebarFilterValue', filterValue);
    }
    var nav = document.getElementById('nav-filter');
    nav.addEventListener('change', checkValue, false);
    nav.addEventListener('input', checkValue, false);
    nav.addEventListener('keyup', checkValue, false);
    var storedValue = sessionStorage.getItem('django.admin.navSidebarFilterValue');
    if (storedValue) {
      nav.value = storedValue;
      checkValue({
        target: nav,
        key: ''
      });
    }
  };
  var toggleNavSidebar = document.getElementById('toggle-nav-sidebar');
  if (toggleNavSidebar !== null) {
    var navSidebar = document.getElementById('nav-sidebar');
    var main = document.getElementById('main');
    var navSidebarIsOpen = localStorage.getItem('django.admin.navSidebarIsOpen');
    if (navSidebarIsOpen === null) {
      navSidebarIsOpen = 'true';
    }
    main.classList.toggle('shifted', navSidebarIsOpen === 'true');
    navSidebar.setAttribute('aria-expanded', navSidebarIsOpen);
    toggleNavSidebar.addEventListener('click', function () {
      if (navSidebarIsOpen === 'true') {
        navSidebarIsOpen = 'false';
      } else {
        navSidebarIsOpen = 'true';
      }
      localStorage.setItem('django.admin.navSidebarIsOpen', navSidebarIsOpen);
      main.classList.toggle('shifted');
      navSidebar.setAttribute('aria-expanded', navSidebarIsOpen);
    });
  }
  window.initSidebarQuickFilter = initSidebarQuickFilter;
  initSidebarQuickFilter();
}