/*global SelectBox, gettext, ngettext, interpolate, quickElement, SelectFilter*/
/*
SelectFilter2 - Turns a multiple-select box into a filter interface.

Requires core.js and SelectBox.js.
*/
'use strict';

function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
{
  window.SelectFilter = {
    init: function init(field_id, field_name, is_stacked) {
      if (field_id.match(/__prefix__/)) {
        // Don't initialize on empty forms.
        return;
      }
      var from_box = document.getElementById(field_id);
      from_box.id += '_from'; // change its ID
      from_box.className = 'filtered';
      from_box.setAttribute('aria-labelledby', field_id + '_from_title');
      var _iterator = _createForOfIteratorHelper(from_box.parentNode.getElementsByTagName('p')),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var p = _step.value;
          if (p.classList.contains("info")) {
            // Remove <p class="info">, because it just gets in the way.
            from_box.parentNode.removeChild(p);
          } else if (p.classList.contains("help")) {
            // Move help text up to the top so it isn't below the select
            // boxes or wrapped off on the side to the right of the add
            // button:
            from_box.parentNode.insertBefore(p, from_box.parentNode.firstChild);
          }
        }

        // <div class="selector"> or <div class="selector stacked">
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      var selector_div = quickElement('div', from_box.parentNode);
      // Make sure the selector div is at the beginning so that the
      // add link would be displayed to the right of the widget.
      from_box.parentNode.prepend(selector_div);
      selector_div.className = is_stacked ? 'selector stacked' : 'selector';

      // <div class="selector-available">
      var selector_available = quickElement('div', selector_div);
      selector_available.className = 'selector-available';
      var selector_available_title = quickElement('div', selector_available);
      selector_available_title.id = field_id + '_from_title';
      selector_available_title.className = 'selector-available-title';
      quickElement('label', selector_available_title, interpolate(gettext('Available %s') + ' ', [field_name]), 'for', field_id + '_from');
      quickElement('p', selector_available_title, interpolate(gettext('Choose %s by selecting them and then select the "Choose" arrow button.'), [field_name]), 'class', 'helptext');
      var filter_p = quickElement('p', selector_available, '', 'id', field_id + '_filter');
      filter_p.className = 'selector-filter';
      var search_filter_label = quickElement('label', filter_p, '', 'for', field_id + '_input');
      quickElement('span', search_filter_label, '', 'class', 'help-tooltip search-label-icon', 'aria-label', interpolate(gettext("Type into this box to filter down the list of available %s."), [field_name]));
      filter_p.appendChild(document.createTextNode(' '));
      var filter_input = quickElement('input', filter_p, '', 'type', 'text', 'placeholder', gettext("Filter"));
      filter_input.id = field_id + '_input';
      selector_available.appendChild(from_box);
      var choose_all = quickElement('button', selector_available, interpolate(gettext('Choose all %s'), [field_name]), 'id', field_id + '_add_all', 'class', 'selector-chooseall');

      // <ul class="selector-chooser">
      var selector_chooser = quickElement('ul', selector_div);
      selector_chooser.className = 'selector-chooser';
      var add_button = quickElement('button', quickElement('li', selector_chooser), interpolate(gettext('Choose selected %s'), [field_name]), 'id', field_id + '_add', 'class', 'selector-add');
      var remove_button = quickElement('button', quickElement('li', selector_chooser), interpolate(gettext('Remove selected %s'), [field_name]), 'id', field_id + '_remove', 'class', 'selector-remove');

      // <div class="selector-chosen">
      var selector_chosen = quickElement('div', selector_div, '', 'id', field_id + '_selector_chosen');
      selector_chosen.className = 'selector-chosen';
      var selector_chosen_title = quickElement('div', selector_chosen);
      selector_chosen_title.className = 'selector-chosen-title';
      selector_chosen_title.id = field_id + '_to_title';
      quickElement('label', selector_chosen_title, interpolate(gettext('Chosen %s') + ' ', [field_name]), 'for', field_id + '_to');
      quickElement('p', selector_chosen_title, interpolate(gettext('Remove %s by selecting them and then select the "Remove" arrow button.'), [field_name]), 'class', 'helptext');
      var filter_selected_p = quickElement('p', selector_chosen, '', 'id', field_id + '_filter_selected');
      filter_selected_p.className = 'selector-filter';
      var search_filter_selected_label = quickElement('label', filter_selected_p, '', 'for', field_id + '_selected_input');
      quickElement('span', search_filter_selected_label, '', 'class', 'help-tooltip search-label-icon', 'aria-label', interpolate(gettext("Type into this box to filter down the list of selected %s."), [field_name]));
      filter_selected_p.appendChild(document.createTextNode(' '));
      var filter_selected_input = quickElement('input', filter_selected_p, '', 'type', 'text', 'placeholder', gettext("Filter"));
      filter_selected_input.id = field_id + '_selected_input';
      quickElement('select', selector_chosen, '', 'id', field_id + '_to', 'multiple', '', 'size', from_box.size, 'name', from_box.name, 'aria-labelledby', field_id + '_to_title', 'class', 'filtered');
      var warning_footer = quickElement('div', selector_chosen, '', 'class', 'list-footer-display');
      quickElement('span', warning_footer, '', 'id', field_id + '_list-footer-display-text');
      quickElement('span', warning_footer, ' ' + gettext('(click to clear)'), 'class', 'list-footer-display__clear');
      var clear_all = quickElement('button', selector_chosen, interpolate(gettext('Remove all %s'), [field_name]), 'id', field_id + '_remove_all', 'class', 'selector-clearall');
      from_box.name = from_box.name + '_old';

      // Set up the JavaScript event handlers for the select box filter interface
      var move_selection = function move_selection(e, elem, move_func, from, to) {
        if (!elem.hasAttribute('disabled')) {
          move_func(from, to);
          SelectFilter.refresh_icons(field_id);
          SelectFilter.refresh_filtered_selects(field_id);
          SelectFilter.refresh_filtered_warning(field_id);
        }
        e.preventDefault();
      };
      choose_all.addEventListener('click', function (e) {
        move_selection(e, this, SelectBox.move_all, field_id + '_from', field_id + '_to');
      });
      add_button.addEventListener('click', function (e) {
        move_selection(e, this, SelectBox.move, field_id + '_from', field_id + '_to');
      });
      remove_button.addEventListener('click', function (e) {
        move_selection(e, this, SelectBox.move, field_id + '_to', field_id + '_from');
      });
      clear_all.addEventListener('click', function (e) {
        move_selection(e, this, SelectBox.move_all, field_id + '_to', field_id + '_from');
      });
      warning_footer.addEventListener('click', function (e) {
        filter_selected_input.value = '';
        SelectBox.filter(field_id + '_to', '');
        SelectFilter.refresh_filtered_warning(field_id);
        SelectFilter.refresh_icons(field_id);
      });
      filter_input.addEventListener('keypress', function (e) {
        SelectFilter.filter_key_press(e, field_id, '_from', '_to');
      });
      filter_input.addEventListener('keyup', function (e) {
        SelectFilter.filter_key_up(e, field_id, '_from');
      });
      filter_input.addEventListener('keydown', function (e) {
        SelectFilter.filter_key_down(e, field_id, '_from', '_to');
      });
      filter_selected_input.addEventListener('keypress', function (e) {
        SelectFilter.filter_key_press(e, field_id, '_to', '_from');
      });
      filter_selected_input.addEventListener('keyup', function (e) {
        SelectFilter.filter_key_up(e, field_id, '_to', '_selected_input');
      });
      filter_selected_input.addEventListener('keydown', function (e) {
        SelectFilter.filter_key_down(e, field_id, '_to', '_from');
      });
      selector_div.addEventListener('change', function (e) {
        if (e.target.tagName === 'SELECT') {
          SelectFilter.refresh_icons(field_id);
        }
      });
      selector_div.addEventListener('dblclick', function (e) {
        if (e.target.tagName === 'OPTION') {
          if (e.target.closest('select').id === field_id + '_to') {
            SelectBox.move(field_id + '_to', field_id + '_from');
          } else {
            SelectBox.move(field_id + '_from', field_id + '_to');
          }
          SelectFilter.refresh_icons(field_id);
        }
      });
      from_box.closest('form').addEventListener('submit', function () {
        SelectBox.filter(field_id + '_to', '');
        SelectBox.select_all(field_id + '_to');
      });
      SelectBox.init(field_id + '_from');
      SelectBox.init(field_id + '_to');
      // Move selected from_box options to to_box
      SelectBox.move(field_id + '_from', field_id + '_to');

      // Initial icon refresh
      SelectFilter.refresh_icons(field_id);
    },
    any_selected: function any_selected(field) {
      // Temporarily add the required attribute and check validity.
      field.required = true;
      var any_selected = field.checkValidity();
      field.required = false;
      return any_selected;
    },
    refresh_filtered_warning: function refresh_filtered_warning(field_id) {
      var count = SelectBox.get_hidden_node_count(field_id + '_to');
      var selector = document.getElementById(field_id + '_selector_chosen');
      var warning = document.getElementById(field_id + '_list-footer-display-text');
      selector.className = selector.className.replace('selector-chosen--with-filtered', '');
      warning.textContent = interpolate(ngettext('%s selected option not visible', '%s selected options not visible', count), [count]);
      if (count > 0) {
        selector.className += ' selector-chosen--with-filtered';
      }
    },
    refresh_filtered_selects: function refresh_filtered_selects(field_id) {
      SelectBox.filter(field_id + '_from', document.getElementById(field_id + "_input").value);
      SelectBox.filter(field_id + '_to', document.getElementById(field_id + "_selected_input").value);
    },
    refresh_icons: function refresh_icons(field_id) {
      var from = document.getElementById(field_id + '_from');
      var to = document.getElementById(field_id + '_to');
      // Disabled if no items are selected.
      document.getElementById(field_id + '_add').disabled = !SelectFilter.any_selected(from);
      document.getElementById(field_id + '_remove').disabled = !SelectFilter.any_selected(to);
      // Disabled if the corresponding box is empty.
      document.getElementById(field_id + '_add_all').disabled = !from.querySelector('option');
      document.getElementById(field_id + '_remove_all').disabled = !to.querySelector('option');
    },
    filter_key_press: function filter_key_press(event, field_id, source, target) {
      var source_box = document.getElementById(field_id + source);
      // don't submit form if user pressed Enter
      if (event.which && event.which === 13 || event.keyCode && event.keyCode === 13) {
        source_box.selectedIndex = 0;
        SelectBox.move(field_id + source, field_id + target);
        source_box.selectedIndex = 0;
        event.preventDefault();
      }
    },
    filter_key_up: function filter_key_up(event, field_id, source, filter_input) {
      var input = filter_input || '_input';
      var source_box = document.getElementById(field_id + source);
      var temp = source_box.selectedIndex;
      SelectBox.filter(field_id + source, document.getElementById(field_id + input).value);
      source_box.selectedIndex = temp;
      SelectFilter.refresh_filtered_warning(field_id);
      SelectFilter.refresh_icons(field_id);
    },
    filter_key_down: function filter_key_down(event, field_id, source, target) {
      var source_box = document.getElementById(field_id + source);
      // right key (39) or left key (37)
      var direction = source === '_from' ? 39 : 37;
      // right arrow -- move across
      if (event.which && event.which === direction || event.keyCode && event.keyCode === direction) {
        var old_index = source_box.selectedIndex;
        SelectBox.move(field_id + source, field_id + target);
        SelectFilter.refresh_filtered_selects(field_id);
        SelectFilter.refresh_filtered_warning(field_id);
        source_box.selectedIndex = old_index === source_box.length ? source_box.length - 1 : old_index;
        return;
      }
      // down arrow -- wrap around
      if (event.which && event.which === 40 || event.keyCode && event.keyCode === 40) {
        source_box.selectedIndex = source_box.length === source_box.selectedIndex + 1 ? 0 : source_box.selectedIndex + 1;
      }
      // up arrow -- wrap around
      if (event.which && event.which === 38 || event.keyCode && event.keyCode === 38) {
        source_box.selectedIndex = source_box.selectedIndex === 0 ? source_box.length - 1 : source_box.selectedIndex - 1;
      }
    }
  };
  window.addEventListener('load', function (e) {
    document.querySelectorAll('select.selectfilter, select.selectfilterstacked').forEach(function (el) {
      var data = el.dataset;
      SelectFilter.init(el.id, data.fieldName, parseInt(data.isStacked, 10));
    });
  });
}