'use strict';

function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
{
  var SelectBox = {
    cache: {},
    init: function init(id) {
      var box = document.getElementById(id);
      SelectBox.cache[id] = [];
      var cache = SelectBox.cache[id];
      var _iterator = _createForOfIteratorHelper(box.options),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var node = _step.value;
          cache.push({
            value: node.value,
            text: node.text,
            displayed: 1
          });
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    },
    redisplay: function redisplay(id) {
      // Repopulate HTML select box from cache
      var box = document.getElementById(id);
      var scroll_value_from_top = box.scrollTop;
      box.innerHTML = '';
      var _iterator2 = _createForOfIteratorHelper(SelectBox.cache[id]),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var node = _step2.value;
          if (node.displayed) {
            var new_option = new Option(node.text, node.value, false, false);
            // Shows a tooltip when hovering over the option
            new_option.title = node.text;
            box.appendChild(new_option);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      box.scrollTop = scroll_value_from_top;
    },
    filter: function filter(id, text) {
      // Redisplay the HTML select box, displaying only the choices containing ALL
      // the words in text. (It's an AND search.)
      var tokens = text.toLowerCase().split(/\s+/);
      var _iterator3 = _createForOfIteratorHelper(SelectBox.cache[id]),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var node = _step3.value;
          node.displayed = 1;
          var node_text = node.text.toLowerCase();
          var _iterator4 = _createForOfIteratorHelper(tokens),
            _step4;
          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var token = _step4.value;
              if (!node_text.includes(token)) {
                node.displayed = 0;
                break; // Once the first token isn't found we're done
              }
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      SelectBox.redisplay(id);
    },
    get_hidden_node_count: function get_hidden_node_count(id) {
      var cache = SelectBox.cache[id] || [];
      return cache.filter(function (node) {
        return node.displayed === 0;
      }).length;
    },
    delete_from_cache: function delete_from_cache(id, value) {
      var delete_index = null;
      var cache = SelectBox.cache[id];
      var _iterator5 = _createForOfIteratorHelper(cache.entries()),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _step5$value = _slicedToArray(_step5.value, 2),
            i = _step5$value[0],
            node = _step5$value[1];
          if (node.value === value) {
            delete_index = i;
            break;
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      cache.splice(delete_index, 1);
    },
    add_to_cache: function add_to_cache(id, option) {
      SelectBox.cache[id].push({
        value: option.value,
        text: option.text,
        displayed: 1
      });
    },
    cache_contains: function cache_contains(id, value) {
      // Check if an item is contained in the cache
      var _iterator6 = _createForOfIteratorHelper(SelectBox.cache[id]),
        _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var node = _step6.value;
          if (node.value === value) {
            return true;
          }
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      return false;
    },
    move: function move(from, to) {
      var from_box = document.getElementById(from);
      var _iterator7 = _createForOfIteratorHelper(from_box.options),
        _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var option = _step7.value;
          var option_value = option.value;
          if (option.selected && SelectBox.cache_contains(from, option_value)) {
            SelectBox.add_to_cache(to, {
              value: option_value,
              text: option.text,
              displayed: 1
            });
            SelectBox.delete_from_cache(from, option_value);
          }
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
      SelectBox.redisplay(from);
      SelectBox.redisplay(to);
    },
    move_all: function move_all(from, to) {
      var from_box = document.getElementById(from);
      var _iterator8 = _createForOfIteratorHelper(from_box.options),
        _step8;
      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var option = _step8.value;
          var option_value = option.value;
          if (SelectBox.cache_contains(from, option_value)) {
            SelectBox.add_to_cache(to, {
              value: option_value,
              text: option.text,
              displayed: 1
            });
            SelectBox.delete_from_cache(from, option_value);
          }
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
      SelectBox.redisplay(from);
      SelectBox.redisplay(to);
    },
    sort: function sort(id) {
      SelectBox.cache[id].sort(function (a, b) {
        a = a.text.toLowerCase();
        b = b.text.toLowerCase();
        if (a > b) {
          return 1;
        }
        if (a < b) {
          return -1;
        }
        return 0;
      });
    },
    select_all: function select_all(id) {
      var box = document.getElementById(id);
      var _iterator9 = _createForOfIteratorHelper(box.options),
        _step9;
      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var option = _step9.value;
          option.selected = true;
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }
    }
  };
  window.SelectBox = SelectBox;
}